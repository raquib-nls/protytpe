document.addEventListener("DOMContentLoaded", function () {
  if (window.location.pathname.includes("dashboard.html")) {
    let isLoggedIn = localStorage.getItem("isLoggedIn");

    if (!isLoggedIn || isLoggedIn !== "true") {
      alert("You must login first!");
      window.location.href = "login.html";
    }
  }
});

document.getElementById("loginForm")?.addEventListener("submit", function (e) {
  e.preventDefault();
  localStorage.setItem("isLoggedIn", "true");
  window.location.href = "dashboard.html";
});

document.getElementById("signupForm")?.addEventListener("submit", function (e) {
  e.preventDefault();
  alert("Account created successfully!");
  localStorage.setItem("isLoggedIn", "true");
  window.location.href = "index.html";
});

function googleLogin() {
  alert("Google login clicked!");
  localStorage.setItem("isLoggedIn", "true");
  window.location.href = "dashboard.html";
}

function otpLogin() {
  alert("OTP sent to your mobile!");
  localStorage.setItem("isLoggedIn", "true");
  window.location.href = "index.html";
}

function logout() {
  localStorage.removeItem("isLoggedIn");
  window.location.href = "index.html";
}

//NAVBAR
function toggleMenu() {
  const nav = document.getElementById("nav-links");
  nav.classList.toggle("show");
}

document.addEventListener("click", (e) => {
  if (!e.target.closest(".navbar")) {
    document.getElementById("nav-links").classList.remove("show");
  }
});

// HERO SECTION 
function fet(){
  window.location.href = "features.html";
}
function scrollToFeatures() {
  const featuresSection = document.getElementById("features");
  if (featuresSection) {
    featuresSection.scrollIntoView({
      behavior: "smooth",
      block: "start",
    });
  }
}

// Hero p|| effect
window.addEventListener("scroll", () => {
  const scrolled = window.pageYOffset;
  const heroBackground = document.querySelector(".hero-background");

  if (heroBackground && scrolled < window.innerHeight) {
    const rate = scrolled * -0.5;
    heroBackground.style.transform = `translateY(${rate}px)`;
  }
});

// FEATURES CARDS 
function showFeatureDetail(feature) {
  switch (feature) {
    case "soil":
      alert("üî¨ Soil Health Advisory:\nGet insights about soil quality & fertilizer recommendations.");
      break;
    case "pest":
      alert("üêõ Pest & Disease Detection:\nUpload crop images for AI-powered diagnosis.");
      break;
    case "crop":
      alert("üå± Crop Recommendation:\nDiscover the best crops based on soil & weather.");
      break;
    case "market":
      alert("üí∞ Market Prices:\nCheck real-time mandi rates & price trends.");
      break;
    case "weather":
      alert("üå¶ Weather Forecasts:\nStay updated with accurate forecasts & alerts.");
      break;
    case "voice":
      alert("üé§ Voice Support:\nAsk questions in your language using voice input.");
      break;
    case "chatbot":
      alert("ü§ñ AI Advisory Chatbot:\nGet instant answers to your farming queries.");
      break;
    case "tips":
      alert("üí° Quick Tips:\nDaily farming advice to boost productivity.");
      break;
    case "community":
      alert("üë• Farmer Community:\nConnect, share & learn with other farmers.");
      break;
    default:
      alert("Feature coming soon!");
  }
}

document.addEventListener("DOMContentLoaded", () => {
  const featureCards = document.querySelectorAll(".feature-card");

  featureCards.forEach((card) => {
    card.addEventListener("click", () => {
      // Bounce 
      card.style.transform = "translateY(-15px) scale(0.98)";
      setTimeout(() => {
        card.style.transform = "";
      }, 150);

      // Find feature type by heading text
      const title = card.querySelector("h3").innerText.toLowerCase();
      if (title.includes("soil")) showFeatureDetail("soil");
      else if (title.includes("pest")) showFeatureDetail("pest");
      else if (title.includes("crop")) showFeatureDetail("crop");
      else if (title.includes("market")) showFeatureDetail("market");
      else if (title.includes("weather")) showFeatureDetail("weather");
      else if (title.includes("voice")) showFeatureDetail("voice");
      else if (title.includes("chatbot")) showFeatureDetail("chatbot");
      else if (title.includes("tips")) showFeatureDetail("tips");
      else if (title.includes("community")) showFeatureDetail("community");
    });
  });
});

// SMOOTH ANCHOR LINKS 
document.addEventListener("DOMContentLoaded", () => {
  const anchorLinks = document.querySelectorAll('a[href^="#"]');

  anchorLinks.forEach((link) => {
    link.addEventListener("click", (e) => {
      e.preventDefault();
      const targetId = link.getAttribute("href").substring(1);
      const targetElement = document.getElementById(targetId);

      if (targetElement) {
        targetElement.scrollIntoView({
          behavior: "smooth",
          block: "start",
        });
      }
    });
  });
});

// FADE-IN ON SCROLL 
const observerOptions = {
  threshold: 0.1,
  rootMargin: "0px 0px -50px 0px",
};

const observer = new IntersectionObserver((entries) => {
  entries.forEach((entry) => {
    if (entry.isIntersecting) {
      entry.target.classList.add("visible");
    }
  });
}, observerOptions);

document.addEventListener("DOMContentLoaded", () => {
  const fadeElements = document.querySelectorAll(".fade-in");
  fadeElements.forEach((el) => observer.observe(el));

  const featureCards = document.querySelectorAll(".feature-card");
  featureCards.forEach((card, index) => {
    card.style.animationDelay = `${index * 0.1}s`;
  });
});

//  STATS COUNT
function animateCounter(element) {
  const target = parseInt(element.getAttribute("data-target")) || 0; 
  let current = 0;
  const increment = target / 60;

  const timer = setInterval(() => {
    current += increment;
    if (current >= target) {
      current = target;
      clearInterval(timer);
    }

    const displayValue = Math.floor(current);

    if (target >= 1000) {
      element.textContent = displayValue.toLocaleString(); 
    } else {
      element.textContent = displayValue ;
    }
  }, 16);
}

const statsObserver = new IntersectionObserver(
  (entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const statNumbers = entry.target.querySelectorAll(".stat-number");

        statNumbers.forEach((stat, index) => {
          const targets = [22222, 500, 98];
          if (!stat.classList.contains("animated")) {
            stat.classList.add("animated");
            setTimeout(() => {
              animateCounter(stat, targets[index]);
            }, index * 200);
          }
        });
      }
    });
  },
  { threshold: 0.5 }
);

document.addEventListener("DOMContentLoaded", () => {
  const statsSection = document.querySelector(".stats-highlight");
  if (statsSection) {
    statsObserver.observe(statsSection);
  }
});



// chat part
function toggleChat() {
  const chatWindow = document.getElementById('chatWindow');
  if (chatWindow.style.display === 'flex') {
    chatWindow.style.display = 'none';
  } else {
    chatWindow.style.display = 'flex';
  }
}

function sendMessage() {
  const input = document.getElementById('queryInput');
  const chatBody = document.getElementById('chatBody');
  const msg = input.value.trim();

  if (msg) {

    const userMsg = document.createElement('div');
    userMsg.className = "chat-message user";
    userMsg.innerText = msg;
    chatBody.appendChild(userMsg);


    const botMsg = document.createElement('div');
    botMsg.className = "chat-message bot";

    if (msg.toLowerCase().includes("hello")) {
      botMsg.innerText = "Hi! üå± Do you want crop, weather, or soil info?";
    }
    else if (msg.toLowerCase().includes("hey")) {
      botMsg.innerText = "Hello how can i assist you. üòä";
    }
    else if (msg.toLowerCase().includes("crop")) {
      botMsg.innerText = "üåæ Suggested crop: Wheat or Rice based on your season.";
    } else if (msg.toLowerCase().includes("weather")) {
      botMsg.innerText = "‚òÄÔ∏è Weather looks sunny today, good for field work!";
    } else if (msg.toLowerCase().includes("soil")) {
      botMsg.innerText = "üß™ Soil health tip: Add compost for better fertility.";
    } else {
      botMsg.innerText = "ü§ñ Sorry, I only know about crops, soil & weather now.";
    }

    chatBody.appendChild(botMsg);


    chatBody.scrollTop = chatBody.scrollHeight;


    input.value = "";
  }
}

let rec; 
let isListening = false;

function startVoice() {
  if (!('webkitSpeechRecognition' in window)) {
    alert("Sorry, your browser doesn't support speech recognition.");
    return;
  }

  // Stop 
  if (isListening) {
    rec.stop();
    isListening = false;
    console.log("Voice input stopped.");
    return;
  }
// to create if not 
  if (!rec) {
    rec = new webkitSpeechRecognition();
    rec.lang = "en-IN";
    rec.continuous = false;
    rec.interimResults = false;

    rec.onresult = function (event) {
      const transcript = event.results[0][0].transcript;
      document.getElementById("queryInput").value = transcript;
      sendMessage();
    };

    rec.onerror = function (event) {
      console.error("Speech recognition error:", event.error);
      isListening = false;
    };

    rec.onend = function () {
      console.log("Speech recognition ended.");
      isListening = false;
    };
  }

  
  rec.start();
  isListening = true;
  console.log("Voice input started...");
}




function detectPest() {

  document.getElementById("pestImageInput").click();


  document.getElementById("pestImageInput").onchange = function (event) {
    const file = event.target.files[0];
    if (file) {
      alert("Crop Check Done!\n\n‚Ä¢ Problem: Small bugs eating leaves\n‚Ä¢ Issue: Dark spots on leaves\n‚Ä¢ Solution: Use pest spray + plant nutrients\n\nSee step-by-step help below.");
    }
  }
}

function cropRecommendation() {

  const crops = ["Wheat üåæ", "Rice üåø", "Maize üåΩ", "Sugarcane üç¨", "Cotton üå±"];
  const randomCrop = crops[Math.floor(Math.random() * crops.length)];
  alert("üå± Recommended Crop for this season: " + randomCrop);
}

function marketPrice() {

  const prices = "üìä Market Prices Today:\n" +
    "- Wheat: ‚Çπ2,185/quintal\n" +
    "- Rice: ‚Çπ1,874/quintal\n" +
    "- Maize: ‚Çπ1,632/quintal";
  alert(prices);
}


// translate part
const translations = {
  en: {

    hero_title: "Welcome to Fasal Mitra",
    hero_subtitle: "Your trusted companion for modern farming. Get expert advice, weather updates, market prices, and crop recommendations all in one place.",
    hero_cta: "Start Your Farming Journey",

    features_header: "Comprehensive Farming Solutions",
    features_subheader: "Empowering farmers with cutting-edge technology and personalized agricultural guidance",
    feature_soil_title: "Soil Health Advisory",
    feature_soil_desc: "Get personalized soil analysis and fertilizer recommendations based on your farm's specific needs.",
    feature_pest_title: "Pest & Disease Detection",
    feature_pest_desc: "Upload crop images for AI-powered disease diagnosis and treatment recommendations.",
    feature_crop_title: "Crop Recommendation",
    feature_crop_desc: "Discover the best crops for your location, soil type, and current weather conditions.",
    feature_market_title: "Market Prices",
    feature_market_desc: "Stay updated with real-time mandi rates and price trends for better selling decisions.",
    feature_weather_title: "Weather Forecasts",
    feature_weather_desc: "Get accurate weather predictions and agricultural alerts for your region.",
    feature_voice_title: "Voice Support",
    feature_voice_desc: "Ask questions using your voice in your preferred language for easy access to information.",
    feature_chatbot_title: "AI Advisory Chatbot",
    feature_chatbot_desc: "Get instant answers to your farming queries through our multilingual AI assistant.",
    feature_tips_title: "Quick Tips",
    feature_tips_desc: "Daily farming tips and best practices to improve your crop yield and farm management.",
    feature_community_title: "Farmer Community",
    feature_community_desc: "Connect with fellow farmers, share experiences, and learn from each other.",


    stats_title: "Empowering Farmers Across India",
    stats_farmers: "Active Farmers",
    stats_districts: "Districts Covered",
    stats_queries: "Queries Resolved",
    stats_satisfaction: "Farmer Satisfaction"
  },

  hi: {

    hero_title: "‡§´‡§∏‡§≤ ‡§Æ‡§ø‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à",
    hero_subtitle: "‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡§æ ‡§≠‡§∞‡•ã‡§∏‡•á‡§Æ‡§Ç‡§¶ ‡§∏‡§æ‡§•‡•Ä‡•§ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡§≤‡§æ‡§π, ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä, ‡§Æ‡§Ç‡§°‡•Ä ‡§≠‡§æ‡§µ ‡§î‡§∞ ‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§∏‡§¨ ‡§è‡§ï ‡§ú‡§ó‡§π‡•§",
    hero_cta: "‡§Ö‡§™‡§®‡•Ä ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",

    features_header: "‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§ñ‡•á‡§§‡•Ä ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®",
    features_subheader: "‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§Ö‡§§‡•ç‡§Ø‡§æ‡§ß‡•Å‡§®‡§ø‡§ï ‡§§‡§ï‡§®‡•Ä‡§ï ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ï‡•É‡§∑‡§ø ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§∂‡§ï‡•ç‡§§ ‡§¨‡§®‡§æ‡§®‡§æ",
    feature_soil_title: "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§≤‡§æ‡§π",
    feature_soil_desc: "‡§Ü‡§™‡§ï‡•á ‡§ñ‡•á‡§§ ‡§ï‡•Ä ‡§ú‡§º‡§∞‡•Ç‡§∞‡§§ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§î‡§∞ ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
    feature_pest_title: "‡§ï‡•Ä‡§ü ‡§î‡§∞ ‡§∞‡•ã‡§ó ‡§™‡§π‡§ö‡§æ‡§®",
    feature_pest_desc: "‡§è‡§Ü‡§à ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∞‡•ã‡§ó ‡§™‡§π‡§ö‡§æ‡§® ‡§î‡§∞ ‡§â‡§™‡§ö‡§æ‡§∞ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§õ‡§µ‡§ø‡§Ø‡§æ‡§Ç ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§",
    feature_crop_title: "‡§´‡§∏‡§≤ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂",
    feature_crop_desc: "‡§Ö‡§™‡§®‡•á ‡§∏‡•ç‡§•‡§æ‡§®, ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§î‡§∞ ‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§´‡§∏‡§≤ ‡§ñ‡•ã‡§ú‡•á‡§Ç‡•§",
    feature_market_title: "‡§Æ‡§Ç‡§°‡•Ä ‡§≠‡§æ‡§µ",
    feature_market_desc: "‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§ø‡§Ø‡§≤-‡§ü‡§æ‡§á‡§Æ ‡§Æ‡§Ç‡§°‡•Ä ‡§¶‡§∞‡•ã‡§Ç ‡§î‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§∞‡•Å‡§ù‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§™‡§°‡•á‡§ü ‡§∞‡§π‡•á‡§Ç‡•§",
    feature_weather_title: "‡§Æ‡•å‡§∏‡§Æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®",
    feature_weather_desc: "‡§Ö‡§™‡§®‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§ü‡•Ä‡§ï ‡§Æ‡•å‡§∏‡§Æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§® ‡§î‡§∞ ‡§ï‡•É‡§∑‡§ø ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
    feature_voice_title: "‡§µ‡•â‡§á‡§∏ ‡§∏‡§Æ‡§∞‡•ç‡§•‡§®",
    feature_voice_desc: "‡§Ü‡§∏‡§æ‡§®‡•Ä ‡§∏‡•á ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•Ä ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§®‡•Ä ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§",
    feature_chatbot_title: "‡§è‡§Ü‡§à ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞ ‡§ö‡•à‡§ü‡§¨‡•â‡§ü",
    feature_chatbot_desc: "‡§π‡§Æ‡§æ‡§∞‡•á ‡§¨‡§π‡•Å‡§≠‡§æ‡§∑‡•Ä ‡§è‡§Ü‡§à ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§Ö‡§™‡§®‡•Ä ‡§ï‡•É‡§∑‡§ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡•á ‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
    feature_tips_title: "‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§∏‡•Å‡§ù‡§æ‡§µ",
    feature_tips_desc: "‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§â‡§™‡§ú ‡§î‡§∞ ‡§ñ‡•á‡§§ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¶‡•à‡§®‡§ø‡§ï ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§î‡§∞ ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§™‡•ç‡§∞‡§•‡§æ‡§è‡§Ç‡•§",
    feature_community_title: "‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø",
    feature_community_desc: "‡§Ö‡§®‡•ç‡§Ø ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á‡§Ç, ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§è‡§ï-‡§¶‡•Ç‡§∏‡§∞‡•á ‡§∏‡•á ‡§∏‡•Ä‡§ñ‡•á‡§Ç‡•§",


    stats_title: "‡§≠‡§æ‡§∞‡§§ ‡§≠‡§∞ ‡§ï‡•á ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§∂‡§ï‡•ç‡§§ ‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç",
    stats_farmers: "‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§ø‡§∏‡§æ‡§®",
    stats_districts: "‡§ï‡§µ‡§∞ ‡§ï‡§ø‡§è ‡§ó‡§è ‡§ú‡§ø‡§≤‡•á",
    stats_queries: "‡§∏‡•Å‡§≤‡§ù‡§æ‡§è ‡§ó‡§è ‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
    stats_satisfaction: "‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§Ç‡§§‡•Å‡§∑‡•ç‡§ü‡§ø"
  },

  pa: {

    hero_title: "‡®´‡®∏‡®≤ ‡®Æ‡®ø‡©±‡®§‡®∞ ‡®µ‡®ø‡©±‡®ö ‡®§‡©Å‡®π‡®æ‡®°‡®æ ‡®∏‡®µ‡®æ‡®ó‡®§ ‡®π‡©à",
    hero_subtitle: "‡®Ü‡®ß‡©Å‡®®‡®ø‡®ï ‡®ñ‡©á‡®§‡©Ä ‡®≤‡®à ‡®§‡©Å‡®π‡®æ‡®°‡®æ ‡®≠‡®∞‡©ã‡®∏‡©á‡®Æ‡©∞‡®¶ ‡®∏‡®æ‡®•‡©Ä‡•§ ‡®Æ‡®æ‡®π‡®∞ ‡®∏‡®≤‡®æ‡®π, ‡®Æ‡©å‡®∏‡®Æ ‡®¶‡©Ä ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä, ‡®Æ‡©∞‡®°‡©Ä ‡®≠‡®æ‡®Ö ‡®Ö‡®§‡©á ‡®´‡®∏‡®≤ ‡®∏‡®ø‡®´‡®æ‡®∞‡®∏‡®º‡®æ‡®Ç ‡®∏‡®≠ ‡®á‡©±‡®ï ‡®π‡©Ä ‡®•‡®æ‡®Ç ‡®§‡©á‡•§",
    hero_cta: "‡®Ü‡®™‡®£‡©Ä ‡®ñ‡©á‡®§‡©Ä ‡®Ø‡®æ‡®§‡®∞‡®æ ‡®∏‡®º‡©Å‡®∞‡©Ç ‡®ï‡®∞‡©ã",

    features_header: "‡®µ‡®ø‡®Ü‡®™‡®ï ‡®ñ‡©á‡®§‡©Ä ‡®∏‡©å‡®≤‡®ø‡®ä‡®∏‡®º‡®®",
    features_subheader: "‡®ï‡®ø‡®∏‡®æ‡®®‡®æ‡®Ç ‡®®‡©Ç‡©∞ ‡®Ö‡®ß‡©Å‡®®‡®ø‡®ï ‡®§‡®ï‡®®‡®æ‡®≤‡©ã‡®ú‡©Ä ‡®Ö‡®§‡©á ‡®®‡®ø‡©±‡®ú‡©Ä ‡®ï‡®ø‡®∏‡®æ‡®®‡©Ä ‡®Æ‡®æ‡®∞‡®ó‡®¶‡®∞‡®∏‡®º‡®® ‡®®‡®æ‡®≤ ‡®Æ‡®ú‡®º‡®¨‡©Ç‡®§ ‡®¨‡®£‡®æ‡®â‡®£‡®æ",

    feature_soil_title: "‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®∏‡®ø‡®π‡®§ ‡®∏‡®≤‡®æ‡®π",
    feature_soil_desc: "‡®§‡©Å‡®π‡®æ‡®°‡©á ‡®ñ‡©á‡®§ ‡®¶‡©Ä‡®Ü‡®Ç ‡©õ‡®∞‡©Ç‡®∞‡®§‡®æ‡®Ç ‡®Ö‡®®‡©Å‡®∏‡®æ‡®∞ ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®µ‡®ø‡®∏‡®º‡®≤‡©á‡®∏‡®º‡®£ ‡®Ö‡®§‡©á ‡®ñ‡®æ‡®¶ ‡®¶‡©Ä ‡®∏‡®ø‡®´‡®æ‡®∞‡®∏‡®º ‡®™‡©ç‡®∞‡®æ‡®™‡®§ ‡®ï‡®∞‡©ã‡•§",
    feature_pest_title: "‡®ï‡©Ä‡©ú‡©á ‡®Ö‡®§‡©á ‡®¨‡®ø‡®Æ‡®æ‡®∞‡©Ä ‡®™‡®õ‡®æ‡®£",
    feature_pest_desc: "‡®è‡®Ü‡®à ‡®Ü‡®ß‡®æ‡®∞‡®ø‡®§ ‡®¨‡®ø‡®Æ‡®æ‡®∞‡©Ä ‡®™‡®õ‡®æ‡®£ ‡®Ö‡®§‡©á ‡®á‡®≤‡®æ‡®ú ‡®∏‡®ø‡®´‡®æ‡®∞‡®∏‡®º‡®æ‡®Ç ‡®≤‡®à ‡®´‡®∏‡®≤ ‡®¶‡©Ä‡®Ü‡®Ç ‡®§‡®∏‡®µ‡©Ä‡®∞‡®æ‡®Ç ‡®Ö‡®™‡®≤‡©ã‡®° ‡®ï‡®∞‡©ã‡•§",
    feature_crop_title: "‡®´‡®∏‡®≤ ‡®∏‡®ø‡®´‡®æ‡®∞‡®∏‡®º",
    feature_crop_desc: "‡®Ü‡®™‡®£‡©Ä ‡®ú‡®ó‡©ç‡®π‡®æ, ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡©á ‡®™‡©ç‡®∞‡®ï‡®æ‡®∞ ‡®Ö‡®§‡©á ‡®Æ‡©å‡®ú‡©Ç‡®¶‡®æ ‡®Æ‡©å‡®∏‡®Æ ‡®Ö‡®®‡©Å‡®∏‡®æ‡®∞ ‡®∏‡®≠ ‡®§‡©ã‡®Ç ‡®µ‡®ß‡©Ä‡®Ü ‡®´‡®∏‡®≤ ‡®ñ‡©ã‡®ú‡©ã‡•§",
    feature_market_title: "‡®Æ‡©∞‡®°‡©Ä ‡®≠‡®æ‡®Ö",
    feature_market_desc: "‡®µ‡®ß‡©Ä‡®Ü ‡®µ‡®ø‡®ï‡®∞‡©Ä ‡®´‡©à‡®∏‡®≤‡©á ‡®≤‡®à ‡®∞‡©Ä‡®Ö‡®≤-‡®ü‡®æ‡®à‡®Æ ‡®Æ‡©∞‡®°‡©Ä ‡®¶‡®∞‡®æ‡®Ç ‡®Ö‡®§‡©á ‡®ï‡©Ä‡®Æ‡®§ ‡®∞‡©Å‡®ù‡®æ‡®®‡®æ‡®Ç ‡®®‡®æ‡®≤ ‡®Ö‡®™‡®°‡©á‡®ü ‡®∞‡®π‡©ã‡•§",
    feature_weather_title: "‡®Æ‡©å‡®∏‡®Æ ‡®≠‡®µ‡®ø‡©±‡®ñ‡®µ‡®æ‡®£‡©Ä",
    feature_weather_desc: "‡®Ü‡®™‡®£‡©á ‡®ñ‡©á‡®§‡®∞ ‡®≤‡®à ‡®∏‡®π‡©Ä ‡®Æ‡©å‡®∏‡®Æ ‡®™‡©á‡®∏‡®º‡®ó‡©ã‡®à ‡®Ö‡®§‡©á ‡®ï‡®ø‡®∏‡®æ‡®® ‡®Ö‡®≤‡®∞‡®ü ‡®™‡©ç‡®∞‡®æ‡®™‡®§ ‡®ï‡®∞‡©ã‡•§",
    feature_voice_title: "‡®µ‡©å‡®á‡®∏ ‡®∏‡®π‡®æ‡®á‡®§‡®æ",
    feature_voice_desc: "‡®∏‡©Ç‡®ö‡®®‡®æ ‡®§‡©±‡®ï ‡®Ü‡®∏‡®æ‡®®‡©Ä ‡®®‡®æ‡®≤ ‡®™‡®π‡©Å‡©∞‡®ö ‡®≤‡®à ‡®Ü‡®™‡®£‡©Ä ‡®™‡®∏‡©∞‡®¶‡©Ä‡®¶‡®æ ‡®≠‡®æ‡®∏‡®º‡®æ ‡®µ‡®ø‡©±‡®ö ‡®Ü‡®™‡®£‡©Ä ‡®Ü‡®µ‡®æ‡®ú‡®º ‡®µ‡®∞‡®§‡©ã‡®Ç‡•§",
    feature_chatbot_title: "‡®è‡®Ü‡®à ‡®∏‡®≤‡®æ‡®π‡®ï‡®æ‡®∞ ‡®ö‡©à‡®ü‡®¨‡©å‡®ü",
    feature_chatbot_desc: "‡®∏‡®æ‡®°‡©á ‡®¨‡®π‡©Å‡®≠‡®æ‡®∏‡®º‡©Ä ‡®è‡®Ü‡®à ‡®∏‡®π‡®æ‡®á‡®ï ‡®∞‡®æ‡®π‡©Ä‡®Ç ‡®Ü‡®™‡®£‡©Ä‡®Ü‡®Ç ‡®ñ‡©á‡®§‡©Ä ‡®∏‡©∞‡®¨‡©∞‡®ß‡©Ä ‡®™‡©ç‡®∞‡®∏‡®º‡®®‡®æ‡®Ç ‡®¶‡©á ‡®§‡©Å‡®∞‡©∞‡®§ ‡®ú‡®µ‡®æ‡®¨ ‡®™‡©ç‡®∞‡®æ‡®™‡®§ ‡®ï‡®∞‡©ã‡•§",
    feature_tips_title: "‡®§‡©á‡®ú‡®º ‡®∏‡©Å‡®ù‡®æ‡®Ö",
    feature_tips_desc: "‡®¶‡©à‡®®‡®ø‡®ï ‡®ñ‡©á‡®§‡©Ä ‡®¶‡©á ‡®∏‡©Å‡®ù‡®æ‡®Ö ‡®Ö‡®§‡©á ‡®∏‡®∞‡®µ‡©ã‡®§‡®Æ ‡®Ö‡®≠‡®ø‡®Ü‡®∏ ‡®Ü‡®™‡®£‡©Ä ‡®´‡®∏‡®≤ ‡®â‡®§‡®™‡®æ‡®¶‡®® ‡®Ö‡®§‡©á ‡®ñ‡©á‡®§ ‡®™‡©ç‡®∞‡®¨‡©∞‡®ß‡®® ‡®µ‡®ø‡©±‡®ö ‡®∏‡©Å‡®ß‡®æ‡®∞ ‡®≤‡®à‡•§",
    feature_community_title: "‡®ï‡®ø‡®∏‡®æ‡®® ‡®≠‡®æ‡®à‡®ö‡®æ‡®∞‡®æ",
    feature_community_desc: "‡®π‡©ã‡®∞ ‡®ï‡®ø‡®∏‡®æ‡®®‡®æ‡®Ç ‡®®‡®æ‡®≤ ‡®ú‡©Å‡©ú‡©ã, ‡®Ö‡®®‡©Å‡®≠‡®µ ‡®∏‡®æ‡®Ç‡®ù‡©á ‡®ï‡®∞‡©ã ‡®Ö‡®§‡©á ‡®á‡®ï ‡®¶‡©Ç‡®ú‡©á ‡®§‡©ã‡®Ç ‡®∏‡®ø‡©±‡®ñ‡©ã‡•§",


    stats_title: "‡®≠‡®æ‡®∞‡®§ ‡®≠‡®∞ ‡®¶‡©á ‡®ï‡®ø‡®∏‡®æ‡®®‡®æ‡®Ç ‡®®‡©Ç‡©∞ ‡®Æ‡®ú‡®º‡®¨‡©Ç‡®§ ‡®¨‡®£‡®æ ‡®∞‡®π‡©á ‡®π‡®æ‡®Ç",
    stats_farmers: "‡®∏‡®ï‡©ç‡®∞‡®ø‡®Ø ‡®ï‡®ø‡®∏‡®æ‡®®",
    stats_districts: "‡®ï‡®µ‡®∞ ‡®ï‡©Ä‡®§‡©á ‡®ú‡®º‡®ø‡®≤‡©ç‡®π‡©á",
    stats_queries: "‡®π‡©±‡®≤ ‡®ï‡©Ä‡®§‡©á ‡®ó‡®è ‡®™‡©ç‡®∞‡®∏‡®º‡®®",
    stats_satisfaction: "‡®ï‡®ø‡®∏‡®æ‡®® ‡®∏‡©∞‡®§‡©Å‡®∏‡®º‡®ü‡©Ä"
  }
};


function changeLanguage(lang) {
  document.querySelectorAll("[data-translate]").forEach(el => {
    let key = el.getAttribute("data-translate");
    if (translations[lang] && translations[lang][key]) {
      el.innerText = translations[lang][key];
    }
  });
}

 document.addEventListener("DOMContentLoaded", () => {
      const langSelector = document.getElementById("languageSelector");
      if(langSelector){
        langSelector.addEventListener("change", (e) => {
          changeLanguage(e.target.value);
        });
      }
      changeLanguage("en"); 
    });
